{"version":3,"sources":["_src/gameOfLife.js","_src/gameLibrary.js","_src/util.js","Cell.js","App.js","serviceWorker.js","index.js"],"names":["world","require","module","exports","nextGeneration","currGeneration","bounds","topLeft","bottomRight","length","width","gridEndDimension","grid","generateGrid","map","x","filter","position","currentAliveCell","rowPosition","columnPosition","gridEndRow","gridEndColumn","isPositionExists","forEach","aliveCell","initializeGrid","latitude","longitude","updateGrid","aliveCells","newGeneration","_world$getGridDimensi","getGridDimension","row","column","push","getAliveCells","cell","sum","parseBoolToInt","repeatCharacter","dimension","breadth","Array","fill","element","generateLabelledGrid","this","y","isCellPositionValid","_this$getGridDimensio","Math","min","isCellStateAlive","getAllNeighbours","points","neighbour","getAliveNeighbours","_this","getAliveNeighboursCount","reduce","updatePositionState","positionDetail","aliveNeighbours","newGrid","slice","_this$getGridDimensio2","newState","runWorld","numberOfIteration","calculateLongestElementLength","list","_this$getGridDimensio3","toString","createPrintableBoard","longestLength","printableBoard","col","lengthDifference","join","borderLength","border","num1","num2","value","times","char","Cell","react_default","a","createElement","height","props","color","stroke","strokeWidth","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","gen","_this2","timerID","setInterval","tick","setState","cells","colors","i","j","src_Cell","concat","genCells","toColourLookup","className","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c3b4a5e9.chunk.js","sourcesContent":["const { world } = require('./gameLibrary.js');\n\nconst isPositionExists = function(currentAliveCell){\n  let { rowPosition, columnPosition, gridEndDimension } = currentAliveCell;\n  let gridEndRow = gridEndDimension[0];\n  let gridEndColumn = gridEndDimension[1];\n  return (rowPosition >= 0 && columnPosition >= 0) && \n    (rowPosition <= gridEndRow && columnPosition <= gridEndColumn);\n}\n\nconst getAliveCells = function(bounds){\n  let { topLeft, bottomRight } = bounds;\n  let newGeneration = [];\n  let {length, width} = world.getGridDimension(world.grid);\n  for(let row=0; row<length; row++){\n    for(let column=0; column<width; column++){\n      world.grid[row][column]==1 && newGeneration.push([row, column]);\n    }\n  }\n  return newGeneration;\n}\n\nconst nextGeneration = function(currGeneration,bounds) {\n  let  {topLeft,  bottomRight } = bounds; \n  let length = bottomRight[0] - topLeft[0] +1;\n  let width = bottomRight[1] - topLeft[1] +1;\n  let gridEndDimension = [length, width];\n  \n  world.grid = world.generateGrid({length, width});\n  currGeneration =  currGeneration.map((x)=> [x[0]- topLeft[0], x[1]- topLeft[1]]);\n  currGeneration = currGeneration.filter((position)=> {\n    return isPositionExists({rowPosition: position[0], columnPosition: position[1], gridEndDimension})\n  });\n  currGeneration.forEach((aliveCell)=> { world.initializeGrid( { latitude:aliveCell[0], longitude:aliveCell[1] })});\n  \n  world.updateGrid();\n  let aliveCells= getAliveCells(bounds);\n  aliveCells =  aliveCells.map((cell)=> [cell[0]+ topLeft[0], cell[1]+ topLeft[1]]);\n  return aliveCells;\n}\n\nmodule.exports = { nextGeneration };\n","const { \n  sum,\n  parseBoolToInt,\n  repeatCharacter\n} = require('./util.js');\n\nconst world = {\n  grid :[],\n\n  generateGrid : function(dimension){\n    let {length, breadth} = dimension;\n    let gridRows = new Array(length).fill(0);\n    let grid = gridRows.map((element)=> new Array(breadth).fill(0));\n    return grid;\n  },\n\n  generateLabelledGrid : function(dimension){\n    this.grid = this.generateGrid(dimension);\n    let position=1;\n    return this.grid = this.grid.map((x)=> x.map((y) => position++));\n  },\n\n  getGridDimension : function(grid){\n    return {length: grid.length, width : grid[0].length };\n  },\n\n  isCellPositionValid : function(position) {\n    let { latitude, longitude } = position;\n    let {length, width} = this.getGridDimension(this.grid);\n    return !( Math.min(latitude,longitude) < 0 || latitude >= length ||longitude >= width);\n  },\n\n  isCellStateAlive : function(position) {\n    let { latitude, longitude } = position;\n    return (this.isCellPositionValid(position)) &&  (this.grid[latitude][longitude] == 1);\n  },\n\n  getAllNeighbours : function(position){\n    let { latitude, longitude } = position;\n    let points = [-1, 0, 1];\n    let neighbour=[];\n\n    points.forEach((x)=> {\n      points.forEach((y) =>{\n        neighbour.push([latitude+x, longitude+y]);\n      });\n    });\n\n    return neighbour.filter((x)=>{ return !(x[0] ==latitude && x[1] == longitude)});\n  },\n\n  getAliveNeighbours : function(position) {\n    let { latitude, longitude } = position;\n    return this.getAllNeighbours(position).map((x)=> this.isCellStateAlive({ latitude:x[0], longitude:x[1]})).map(parseBoolToInt);\n  },\n\n  getAliveNeighboursCount : function(position) {\n    return this.getAliveNeighbours(position).reduce(sum);\n  },\n\n  updatePositionState : function(positionDetail){\n    let { latitude, longitude, aliveNeighbours } = positionDetail;\n    if(aliveNeighbours < 2 || aliveNeighbours > 3){\n      return 0;\n    }\n    if(aliveNeighbours == 3){\n      return 1;\n    }\n    return this.grid[latitude][longitude];\n  },\n\n  updateGrid : function(){\n    let newGrid = this.grid.map((x)=> x.slice());\n    let {length, width} = this.getGridDimension(this.grid);\n    for(let latitude=0; latitude<length; latitude++){\n      for(let longitude=0;longitude<width; longitude++){\n        let aliveNeighbours = this.getAliveNeighboursCount({latitude, longitude});\n        let newState = this.updatePositionState({latitude, longitude, aliveNeighbours});\n        newGrid[latitude][longitude] = newState;\n      }\n    }\n    this.grid = newGrid\n  },\n\n  initializeGrid : function(position){\n    let { latitude, longitude } = position;\n    this.grid[latitude][longitude] = 1;\n  },\n\n  runWorld : function(numberOfIteration){\n    while (numberOfIteration){\n      this.updateGrid();\n      numberOfIteration--;\n    }\n    return this.grid;\n  },\n  \n  calculateLongestElementLength : function(list) {\n  let { length, breadth } =  this.getGridDimension(world.grid);\n  return (length*breadth).toString().length;\n  },\n\n  createPrintableBoard : function(grid){\n  let longestLength = this.calculateLongestElementLength(grid);\n  let printableBoard= grid.map((row)=>row.map((col)=>{\n    let lengthDifference = longestLength - col.toString().length;\n    let prefixString = new Array(lengthDifference).fill(' ').join('');\n    return prefixString + col;\n  }));\n  printableBoard = printableBoard.map((row) => '|' + row.join('|')+ '|');\n  let borderLength = printableBoard[0].length;\n  let border = repeatCharacter(borderLength, \"-\");\n  printableBoard = border + \"\\n\" + printableBoard.join(\"\\n\" + border + \"\\n\")+ \"\\n\" + border;\n  return printableBoard;\n  }\n}\n\nmodule.exports = { \n  world \n};\n","const sum = function(num1, num2){\n  return num1 + num2;\n}\n\nconst parseBoolToInt = function(value){\n  return 0 + value;\n}\n\nconst repeatCharacter = function(times, char) {\nreturn new Array(times).fill(char).join(\"\");\n}\n\nmodule.exports = {\n  sum,\n  parseBoolToInt,\n  repeatCharacter \n}\n","import React, { Component } from 'react';\n\nclass Cell extends Component {\n  render() {\n    return <rect width=\"10\" \n    height=\"10\"\n    fill={this.props.color || \"white\"}\n    x={this.props.col*10} \n    y={this.props.row*10} \n    stroke=\"lightgray\" \n    strokeWidth={1}></rect>\n  }\n}\n\nexport default Cell;","import React, { Component } from 'react';\nimport Cell from './Cell';\nconst {nextGeneration} = require('./_src/gameOfLife.js');\n\nconst genId = (a) => a.join(\"_\");\n\nconst genCells = (colors) => {\n  let cells = [];\n  for(let i=0;i<17;i++) {\n    for(let j=0;j<17;j++) {\n      cells.push(<Cell row={i} col={j} color={colors[`${i}_${j}`]}/>);\n    }\n  }\n  return cells;\n}\n\nconst toColourLookup=(cells) => {\n  let colors={};\n  cells.forEach(cell => {\n    colors[genId(cell)]=\"black\"\n  });\n  return colors;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {gen: this.props.gen};\n  }\n  componentDidMount() {\n    this.timerID = setInterval(()=>this.tick(),180)\n  }\n  tick() {\n    this.setState((state,props)=>{\n      let newState=nextGeneration(state.gen,{topLeft:[0,0],bottomRight:[17,17]});\n      return {gen:newState};\n    });\n  }\n  render() {\n    let colors=toColourLookup(this.state.gen)\n    let cells=genCells(colors);\n    return (\n      <div className=\"App\">\n        <svg width={800} height={800}>\n          {cells}\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst coords=[ [ 1, 5 ],\n[ 1, 11 ],\n[ 2, 5 ],\n[ 2, 11 ],\n[ 3, 5 ],\n[ 3, 6 ],\n[ 3, 10 ],\n[ 3, 11 ],\n[ 5, 1 ],\n[ 5, 2 ],\n[ 5, 3 ],\n[ 5, 6 ],\n[ 5, 7 ],\n[ 5, 9 ],\n[ 5, 10 ],\n[ 5, 13 ],\n[ 5, 14 ],\n[ 5, 15 ],\n[ 6, 3 ],\n[ 6, 5 ],\n[ 6, 7 ],\n[ 6, 9 ],\n[ 6, 11 ],\n[ 6, 13 ],\n[ 7, 5 ],\n[ 7, 6 ],\n[ 7, 10 ],\n[ 7, 11 ],\n[ 9, 5 ],\n[ 9, 6 ],\n[ 9, 10 ],\n[ 9, 11 ],\n[ 10, 3 ],\n[ 10, 5 ],\n[ 10, 7 ],\n[ 10, 9 ],\n[ 10, 11 ],\n[ 10, 13 ],\n[ 11, 1 ],\n[ 11, 2 ],\n[ 11, 3 ],\n[ 11, 6 ],\n[ 11, 7 ],\n[ 11, 9 ],\n[ 11, 10 ],\n[ 11, 13 ],\n[ 11, 14 ],\n[ 11, 15 ],\n[ 13, 5 ],\n[ 13, 6 ],\n[ 13, 10 ],\n[ 13, 11 ],\n[ 14, 5 ],\n[ 14, 11 ],\n[ 15, 5 ],\n[ 15, 11 ] ];\nReactDOM.render(<App gen={coords}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}